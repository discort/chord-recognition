import numpy as np


TRAIN_MEAN = np.array([0.9702533 , 0.97221136, 0.97123176, 0.9704934 , 0.9725646 ,
       0.96950746, 0.97195965, 0.9715225 , 0.9706244 , 0.972768  ,
       0.970573  , 0.9732527 , 0.97268116, 0.9712611 , 0.9732938 ,
       0.97059506, 0.97329104, 0.97256565, 0.97075754, 0.9727091 ,
       0.96936375, 0.971724  , 0.97133404, 0.97021335, 0.9716873 ,
       0.96913075, 0.9714862 , 0.9700431 , 0.9694722 , 0.97119135,
       0.970575  , 0.9724966 , 0.9707541 , 0.97048086, 0.9722943 ,
       0.9701912 , 0.9717101 , 0.9700729 , 0.9693412 , 0.97096586,
       0.9687057 , 0.9711164 , 0.96958894, 0.9688541 , 0.9707521 ,
       0.9682513 , 0.97092134, 0.96997875, 0.9691719 , 0.9710059 ,
       0.96834123, 0.9708015 , 0.9693896 , 0.96779335, 0.969929  ,
       0.96642596, 0.96857214, 0.96719605, 0.9669921 , 0.96887064,
       0.9664025 , 0.9687092 , 0.9678456 , 0.9672678 , 0.969074  ,
       0.96699345, 0.96897835, 0.96758115, 0.9674105 , 0.96944267,
       0.96605736, 0.96794796, 0.9659468 , 0.9661186 , 0.9687079 ,
       0.96552235, 0.9676397 , 0.96623504, 0.9658902 , 0.9681936 ,
       0.9674737 , 0.96954757, 0.96819407, 0.967981  , 0.9697161 ,
       0.9665548 , 0.9683244 , 0.96719944, 0.96691895, 0.96902555,
       0.9655388 , 0.9674434 , 0.9666395 , 0.9658052 , 0.9672156 ,
       0.9663586 , 0.9685507 , 0.96741897, 0.9665645 , 0.967983  ,
       0.9668936 , 0.9690294 , 0.96787286, 0.9669029 , 0.968939  ],
dtype=np.float32).reshape(-1, 1)

TRAIN_STD = np.array([0.5452489 , 0.5455859 , 0.545732  , 0.5452701 , 0.5459544 ,
       0.5459345 , 0.54575586, 0.54617906, 0.54552966, 0.54599   ,
       0.54560494, 0.54538095, 0.5458553 , 0.5449504 , 0.5454829 ,
       0.54597396, 0.546261  , 0.5463402 , 0.5453451 , 0.54619247,
       0.5460634 , 0.54648656, 0.54678094, 0.5460048 , 0.546522  ,
       0.545776  , 0.5459225 , 0.54586   , 0.5454102 , 0.5462333 ,
       0.54555064, 0.5460312 , 0.54554456, 0.5450165 , 0.5458893 ,
       0.5461947 , 0.5461533 , 0.54606014, 0.54484165, 0.5458082 ,
       0.5453767 , 0.5449376 , 0.54536295, 0.5445814 , 0.54550225,
       0.54497474, 0.5445799 , 0.5446055 , 0.543917  , 0.54492646,
       0.5441781 , 0.544237  , 0.54386675, 0.5432329 , 0.5441185 ,
       0.5437872 , 0.5437419 , 0.54374105, 0.54300976, 0.54403126,
       0.5435651 , 0.5432274 , 0.5431383 , 0.5429383 , 0.5442007 ,
       0.543156  , 0.543054  , 0.54242164, 0.54259455, 0.5440627 ,
       0.5427328 , 0.5426932 , 0.54226345, 0.5421595 , 0.5437958 ,
       0.54284996, 0.5431476 , 0.5433396 , 0.54267627, 0.54402244,
       0.5436947 , 0.5443868 , 0.5448206 , 0.5442769 , 0.5450474 ,
       0.5433488 , 0.5438482 , 0.54393125, 0.5438847 , 0.5445688 ,
       0.54271567, 0.5429619 , 0.5432542 , 0.5427246 , 0.5436831 ,
       0.5436469 , 0.5437679 , 0.54329103, 0.54288703, 0.5436015 ,
       0.5435465 , 0.54368246, 0.54359895, 0.54289955, 0.5436596 ],
dtype=np.float32).reshape(-1, 1)


def standardize(x, mean, std, eps=1e-20):
    """
    Rescale inputs to have a mean of 0 and std of 1
    """
    return (x - mean) / (std + eps)


class Rescale:
    """
    Rescale inputs to have a mean of 0 and std of 1
    It must speed up the convergence
    """

    def __init__(self, mean=None, std=None):
        self.mean = mean
        self.std = std

    def __call__(self, frame):
        return standardize(frame, self.mean, self.std)
